/*
 * Source: ProcedureCaller.java - Generated by OBCOM SQL Wizard 1.160
 * Author: Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.escanerproducto.ws;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Methods common to all procedure callers.
 *
 * @author Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 */
public abstract class ProcedureCaller
{
    /**
     * Same as {@code oracle.jdbc.OracleTypes.CURSOR}.
     */
    protected static final int ORACLE_CURSOR = -10;

    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code ProcedureCaller} instance.
     */
    public ProcedureCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- ProcedureCaller Methods -----------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Returns the JDBC URL of the supplied connection.
     *
     * @param  conn the connection to the database.
     * @return the JDBC URL of the supplied connection.
     * @throws NullPointerException if conn is null.
     * @throws SQLException if an SQL error occurs.
     */
    protected String getJdbcURL(final Connection conn)
        throws SQLException
    {
        final String url = conn.getMetaData().getURL();
        return (url == null || url.length() == 0) ? "jdbc:unknown:" : url;
    }

    /**
     * Constructs a CallableStatement using a connection and statement.
     *
     * @param  conn the connection to the database.
     * @param  sql the statement to send to the database.
     * @return a new CallableStatement instance.
     * @throws NullPointerException if conn or sql are null.
     * @throws SQLException if an SQL error occurs.
     */
    protected CallableStatement prepareCall(final Connection conn, final String sql)
        throws SQLException
    {
        return conn.prepareCall(sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
    }

    /**
     * Called when an unexpected ResultSet is received by a Caller.
     *
     * @param  resultSet the ResultSet (can be null).
     * @throws SQLException if an SQL error occurs.
     */
    protected void unexpectedResultSet(final ResultSet resultSet)
        throws SQLException
    {
        if (resultSet != null) {
            resultSet.close();
        }
    }

    /**
     * Returns the {@link Integer} value of the supplied object.
     *
     * @param  value the object to convert to an {@link Integer}.
     * @return the Integer or {@code null} if {@code value} is {@code null}.
     * @throws IllegalArgumentException if {@code value} is not a {@link Number}.
     */
    protected Integer objectToInteger(final Object value)
    {
        if (value == null)
            return null;
        if (value instanceof Integer)
            return (Integer) value;
        if (value instanceof Number)
            return Integer.valueOf(((Number) value).intValue());
        throw new IllegalArgumentException("Cannot convert to Integer: " + value.getClass().getName());
    }
}
