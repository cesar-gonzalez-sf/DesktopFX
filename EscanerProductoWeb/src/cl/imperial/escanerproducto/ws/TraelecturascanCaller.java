/*
 * Source: TraelecturascanCaller.java - Generated by OBCOM SQL Wizard 1.160
 * Author: Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.escanerproducto.ws;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code Escaner$TraeLecturaScan}.
 *
 * @author Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 */
public class TraelecturascanCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code TraelecturascanCaller} instance.
     */
    public TraelecturascanCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code Escaner$TraeLecturaScan} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  vcodigo {@code vCodigo varchar(20)}.
     * @param  vtipo {@code vTipo varchar(5)}.
     * @param  vcodLista {@code vCod_lista varchar(3)}.
     * @param  vcodEmp {@code vCod_Emp varchar(20)}.
     * @param  vcodEntidad {@code vCod_Entidad varchar(13)}.
     * @param  vcodSucursal {@code vCod_Sucursal varchar(3)}.
     * @param  vtipoDoc {@code vTipo_Doc varchar(3)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public TraelecturascanResult executeProc(final DataSource dataSource, String vcodigo, String vtipo, String vcodLista, String vcodEmp, String vcodEntidad, String vcodSucursal, String vtipoDoc)
        throws SQLException
    {
        try (final Connection conn = dataSource.getConnection()) {
            return executeProc(conn, vcodigo, vtipo, vcodLista, vcodEmp, vcodEntidad, vcodSucursal, vtipoDoc);
        }
    }

    /**
     * Executes procedure {@code Escaner$TraeLecturaScan} using a connection.
     *
     * @param  conn the database connection.
     * @param  vcodigo {@code vCodigo varchar(20)}.
     * @param  vtipo {@code vTipo varchar(5)}.
     * @param  vcodLista {@code vCod_lista varchar(3)}.
     * @param  vcodEmp {@code vCod_Emp varchar(20)}.
     * @param  vcodEntidad {@code vCod_Entidad varchar(13)}.
     * @param  vcodSucursal {@code vCod_Sucursal varchar(3)}.
     * @param  vtipoDoc {@code vTipo_Doc varchar(3)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public TraelecturascanResult executeProc(final Connection conn, String vcodigo, String vtipo, String vcodLista, String vcodEmp, String vcodEntidad, String vcodSucursal, String vtipoDoc)
        throws SQLException
    {
        final TraelecturascanResult result = createProcResult();
        final String jdbcURL = getJdbcURL(conn);
        if (jdbcURL.startsWith("jdbc:oracle:")) {
            try (final CallableStatement call = prepareCall(conn, "{call Escaner$TraeLecturaScan(?,?,?,?,?,?,?,?,?)}")) {
                call.setString(1, vcodigo);
                call.setString(2, vtipo);
                call.setString(3, vcodLista);
                call.setString(4, vcodEmp);
                call.setString(5, vcodEntidad);
                call.setString(6, vcodSucursal);
                call.setString(7, vtipoDoc);
                call.registerOutParameter(8, Types.NVARCHAR);
                call.registerOutParameter(9, ORACLE_CURSOR);
                call.execute();
                result.setErrorMessage(call.getString(8));
                result.setProductos(readProductos((ResultSet) call.getObject(9)));
            }
        } else if (jdbcURL.startsWith("jdbc:postgresql:")) {
            try (final CallableStatement call = prepareCall(conn, "{call Escaner$TraeLecturaScan(?,?,?,?,?,?,?,?,?)}")) {
                call.setString(1, vcodigo);
                call.setString(2, vtipo);
                call.setString(3, vcodLista);
                call.setString(4, vcodEmp);
                call.setString(5, vcodEntidad);
                call.setString(6, vcodSucursal);
                call.setString(7, vtipoDoc);
                call.registerOutParameter(8, Types.NVARCHAR);
                call.registerOutParameter(9, Types.OTHER);
                call.execute();
                result.setErrorMessage(call.getString(8));
                result.setProductos(readProductos((ResultSet) call.getObject(9)));
            }
        } else {
            try (final CallableStatement call = prepareCall(conn, "{call Escaner$TraeLecturaScan(?,?,?,?,?,?,?,?)}")) {
                call.setString(1, vcodigo);
                call.setString(2, vtipo);
                call.setString(3, vcodLista);
                call.setString(4, vcodEmp);
                call.setString(5, vcodEntidad);
                call.setString(6, vcodSucursal);
                call.setString(7, vtipoDoc);
                call.registerOutParameter(8, Types.NVARCHAR);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1) {
                    if (!haveRset) {
                        updateCount = call.getUpdateCount();
                    } else if (result.getProductos() == null) {
                        result.setProductos(readProductos(call.getResultSet()));
                    } else {
                        unexpectedResultSet(call.getResultSet());
                    }
                    haveRset = call.getMoreResults();
                }
                result.setErrorMessage(call.getString(8));
            }
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code TraelecturascanResult}.
     * <p>
     * Can be overridden to return a subtype of {@code TraelecturascanResult}.
     *
     * @return a new {@code TraelecturascanResult} instance.
     */
    protected TraelecturascanResult createProcResult()
    {
        return new TraelecturascanResult();
    }

    //--------------------------------------------------------------------------
    //-- TraelecturascanProducto ResultSet Methods -----------------------------
    //--------------------------------------------------------------------------

    /**
     * Converts a result set to an array of {@code TraelecturascanProducto}.
     *
     * @param  resultSet the result set to convert (can be null).
     * @return an array of {@code TraelecturascanProducto} or null.
     * @throws SQLException if an SQL error occurs.
     */
    protected List<TraelecturascanProducto> readProductos(final ResultSet resultSet)
        throws SQLException
    {
        if (resultSet == null)
            return null;
        try {
            // Obtain ordinal (index) numbers of result columns
            final int cCodRapido = resultSet.findColumn("COD_RAPIDO");
            final int cCodProducto = resultSet.findColumn("COD_PRODUCTO");
            final int cDescripcion = resultSet.findColumn("DESCRIPCION");
            final int cPrecioBruto = resultSet.findColumn("PRECIO_BRUTO");
            final int cDescuento = resultSet.findColumn("DESCUENTO");
            final int cCantidadEmbalaje = resultSet.findColumn("CANTIDAD_EMBALAJE");
            final int cCodUnimed = resultSet.findColumn("COD_UNIMED");
            final int cCantidad = resultSet.findColumn("CANTIDAD");
            final int cTipo = resultSet.findColumn("TIPO");
            final int cCode = resultSet.findColumn("CODE");

            // Convert result rows to an array of "TraelecturascanProducto"
            final List<TraelecturascanProducto> list = new ArrayList<>();
            while (resultSet.next()) {
                final TraelecturascanProducto item = createProducto();
                item.setCodRapido(resultSet.getString(cCodRapido));
                item.setCodProducto(resultSet.getString(cCodProducto));
                item.setDescripcion(resultSet.getString(cDescripcion));
                item.setPrecioBruto(resultSet.getString(cPrecioBruto));
                item.setDescuento(resultSet.getString(cDescuento));
                item.setCantidadEmbalaje(resultSet.getString(cCantidadEmbalaje));
                item.setCodUnimed(resultSet.getString(cCodUnimed));
                item.setCantidad(resultSet.getString(cCantidad));
                item.setTipo(resultSet.getString(cTipo));
                item.setCode(resultSet.getString(cCode));
                if (filterProducto(item)) list.add(item);
            }
            return list;
        } finally {
            resultSet.close();
        }
    }

    /**
     * Creates and returns a new instance of {@code TraelecturascanProducto}.
     * <p>
     * Can be overridden to return a subtype of {@code TraelecturascanProducto}.
     *
     * @return a new {@code TraelecturascanProducto} instance.
     */
    protected TraelecturascanProducto createProducto()
    {
        return new TraelecturascanProducto();
    }

    /**
     * Returns {@code true} if supplied item should be added to result set.
     * <p>
     * Can be overridden to select which items are added to the result set.
     *
     * @param  item the {@code TraelecturascanProducto} to be checked.
     * @return {@code true} if {@code item} should be added to result set.
     * @throws NullPointerException if {@code item} is {@code null}.
     */
    protected boolean filterProducto(final TraelecturascanProducto item)
    {
        return true;
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code Escaner$TraeLecturaScan} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  vcodigo {@code vCodigo varchar(20)}.
     * @param  vtipo {@code vTipo varchar(5)}.
     * @param  vcodLista {@code vCod_lista varchar(3)}.
     * @param  vcodEmp {@code vCod_Emp varchar(20)}.
     * @param  vcodEntidad {@code vCod_Entidad varchar(13)}.
     * @param  vcodSucursal {@code vCod_Sucursal varchar(3)}.
     * @param  vtipoDoc {@code vTipo_Doc varchar(3)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static TraelecturascanResult execute(final DataSource dataSource, String vcodigo, String vtipo, String vcodLista, String vcodEmp, String vcodEntidad, String vcodSucursal, String vtipoDoc)
        throws SQLException
    {
        return new TraelecturascanCaller().executeProc(dataSource, vcodigo, vtipo, vcodLista, vcodEmp, vcodEntidad, vcodSucursal, vtipoDoc);
    }

    /**
     * Executes procedure {@code Escaner$TraeLecturaScan} using a connection.
     *
     * @param  conn the database connection.
     * @param  vcodigo {@code vCodigo varchar(20)}.
     * @param  vtipo {@code vTipo varchar(5)}.
     * @param  vcodLista {@code vCod_lista varchar(3)}.
     * @param  vcodEmp {@code vCod_Emp varchar(20)}.
     * @param  vcodEntidad {@code vCod_Entidad varchar(13)}.
     * @param  vcodSucursal {@code vCod_Sucursal varchar(3)}.
     * @param  vtipoDoc {@code vTipo_Doc varchar(3)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static TraelecturascanResult execute(final Connection conn, String vcodigo, String vtipo, String vcodLista, String vcodEmp, String vcodEntidad, String vcodSucursal, String vtipoDoc)
        throws SQLException
    {
        return new TraelecturascanCaller().executeProc(conn, vcodigo, vtipo, vcodLista, vcodEmp, vcodEntidad, vcodSucursal, vtipoDoc);
    }
}
