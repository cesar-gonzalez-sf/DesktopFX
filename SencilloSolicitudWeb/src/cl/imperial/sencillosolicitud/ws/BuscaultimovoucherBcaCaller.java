/*
 * Source: BuscaultimovoucherBcaCaller.java - Generated by OBCOM SQL Wizard 1.158
 * Author: Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.sencillosolicitud.ws;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code SolicitudSencillo$BuscaUltimoVoucher_bca}.
 *
 * @author Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 */
public class BuscaultimovoucherBcaCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code BuscaultimovoucherBcaCaller} instance.
     */
    public BuscaultimovoucherBcaCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUltimoVoucher_bca} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  tipoTran {@code Tipo_Tran varchar(20)}.
     * @param  codEmp {@code Cod_Emp char(8)}.
     * @param  usuario {@code Usuario char(40)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public BuscaultimovoucherBcaResult executeProc(final DataSource dataSource, String tipoTran, String codEmp, String usuario)
        throws SQLException
    {
        try (final Connection conn = dataSource.getConnection()) {
            return executeProc(conn, tipoTran, codEmp, usuario);
        }
    }

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUltimoVoucher_bca} using a connection.
     *
     * @param  conn the database connection.
     * @param  tipoTran {@code Tipo_Tran varchar(20)}.
     * @param  codEmp {@code Cod_Emp char(8)}.
     * @param  usuario {@code Usuario char(40)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public BuscaultimovoucherBcaResult executeProc(final Connection conn, String tipoTran, String codEmp, String usuario)
        throws SQLException
    {
        final BuscaultimovoucherBcaResult result = createProcResult();
        final String jdbcURL = getJdbcURL(conn);
        if (jdbcURL.startsWith("jdbc:oracle:")) {
            try (final CallableStatement call = prepareCall(conn, "{call SolicitudSencillo$BuscaUltimoVoucher_bca(?,?,?,?,?)}")) {
                call.setString(1, tipoTran);
                call.setString(2, codEmp);
                call.setString(3, usuario);
                call.registerOutParameter(4, Types.NVARCHAR);
                call.registerOutParameter(5, ORACLE_CURSOR);
                call.execute();
                result.setErrorMessage(call.getString(4));
                result.setVouchers(readVouchers((ResultSet) call.getObject(5)));
            }
        } else if (jdbcURL.startsWith("jdbc:postgresql:")) {
            try (final CallableStatement call = prepareCall(conn, "{call SolicitudSencillo$BuscaUltimoVoucher_bca(?,?,?,?,?)}")) {
                call.setString(1, tipoTran);
                call.setString(2, codEmp);
                call.setString(3, usuario);
                call.registerOutParameter(4, Types.NVARCHAR);
                call.registerOutParameter(5, Types.OTHER);
                call.execute();
                result.setErrorMessage(call.getString(4));
                result.setVouchers(readVouchers((ResultSet) call.getObject(5)));
            }
        } else {
            try (final CallableStatement call = prepareCall(conn, "{call SolicitudSencillo$BuscaUltimoVoucher_bca(?,?,?,?)}")) {
                call.setString(1, tipoTran);
                call.setString(2, codEmp);
                call.setString(3, usuario);
                call.registerOutParameter(4, Types.NVARCHAR);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1) {
                    if (!haveRset) {
                        updateCount = call.getUpdateCount();
                    } else if (result.getVouchers() == null) {
                        result.setVouchers(readVouchers(call.getResultSet()));
                    } else {
                        unexpectedResultSet(call.getResultSet());
                    }
                    haveRset = call.getMoreResults();
                }
                result.setErrorMessage(call.getString(4));
            }
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code BuscaultimovoucherBcaResult}.
     * <p>
     * Can be overridden to return a subtype of {@code BuscaultimovoucherBcaResult}.
     *
     * @return a new {@code BuscaultimovoucherBcaResult} instance.
     */
    protected BuscaultimovoucherBcaResult createProcResult()
    {
        return new BuscaultimovoucherBcaResult();
    }

    //--------------------------------------------------------------------------
    //-- BuscaultimovoucherBcaVoucher ResultSet Methods ------------------------
    //--------------------------------------------------------------------------

    /**
     * Converts a result set to an array of {@code BuscaultimovoucherBcaVoucher}.
     *
     * @param  resultSet the result set to convert (can be null).
     * @return an array of {@code BuscaultimovoucherBcaVoucher} or null.
     * @throws SQLException if an SQL error occurs.
     */
    protected List<BuscaultimovoucherBcaVoucher> readVouchers(final ResultSet resultSet)
        throws SQLException
    {
        if (resultSet == null)
            return null;
        try {
            // Obtain ordinal (index) numbers of result columns
            final int cNroInterno = resultSet.findColumn("NRO_INTERNO");
            final int cNroInternopadre = resultSet.findColumn("NRO_INTERNOPADRE");
            final int cTipoTransaccion = resultSet.findColumn("TIPO_TRANSACCION");
            final int cCodEmp = resultSet.findColumn("COD_EMP");
            final int cFecha = resultSet.findColumn("FECHA");
            final int cMontoEfectivo = resultSet.findColumn("MONTO_EFECTIVO");
            final int cMontoDocumentos = resultSet.findColumn("MONTO_DOCUMENTOS");
            final int cUsuario = resultSet.findColumn("USUARIO");
            final int cEstacion = resultSet.findColumn("ESTACION");
            final int cEstado = resultSet.findColumn("ESTADO");
            final int cCodUsurecibe = resultSet.findColumn("COD_USURECIBE");
            final int cCierre = resultSet.findColumn("CIERRE");

            // Convert result rows to an array of "BuscaultimovoucherBcaVoucher"
            final List<BuscaultimovoucherBcaVoucher> list = new ArrayList<>();
            while (resultSet.next()) {
                final BuscaultimovoucherBcaVoucher item = createVoucher();
                item.setNroInterno(resultSet.getString(cNroInterno));
                item.setNroInternopadre(resultSet.getString(cNroInternopadre));
                item.setTipoTransaccion(resultSet.getString(cTipoTransaccion));
                item.setCodEmp(resultSet.getString(cCodEmp));
                item.setFecha(resultSet.getString(cFecha));
                item.setMontoEfectivo(resultSet.getString(cMontoEfectivo));
                item.setMontoDocumentos(resultSet.getString(cMontoDocumentos));
                item.setUsuario(resultSet.getString(cUsuario));
                item.setEstacion(resultSet.getString(cEstacion));
                item.setEstado(resultSet.getString(cEstado));
                item.setCodUsurecibe(resultSet.getString(cCodUsurecibe));
                item.setCierre(resultSet.getString(cCierre));
                if (filterVoucher(item)) list.add(item);
            }
            return list;
        } finally {
            resultSet.close();
        }
    }

    /**
     * Creates and returns a new instance of {@code BuscaultimovoucherBcaVoucher}.
     * <p>
     * Can be overridden to return a subtype of {@code BuscaultimovoucherBcaVoucher}.
     *
     * @return a new {@code BuscaultimovoucherBcaVoucher} instance.
     */
    protected BuscaultimovoucherBcaVoucher createVoucher()
    {
        return new BuscaultimovoucherBcaVoucher();
    }

    /**
     * Returns {@code true} if supplied item should be added to result set.
     * <p>
     * Can be overridden to select which items are added to the result set.
     *
     * @param  item the {@code BuscaultimovoucherBcaVoucher} to be checked.
     * @return {@code true} if {@code item} should be added to result set.
     * @throws NullPointerException if {@code item} is {@code null}.
     */
    protected boolean filterVoucher(final BuscaultimovoucherBcaVoucher item)
    {
        return true;
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUltimoVoucher_bca} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  tipoTran {@code Tipo_Tran varchar(20)}.
     * @param  codEmp {@code Cod_Emp char(8)}.
     * @param  usuario {@code Usuario char(40)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static BuscaultimovoucherBcaResult execute(final DataSource dataSource, String tipoTran, String codEmp, String usuario)
        throws SQLException
    {
        return new BuscaultimovoucherBcaCaller().executeProc(dataSource, tipoTran, codEmp, usuario);
    }

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUltimoVoucher_bca} using a connection.
     *
     * @param  conn the database connection.
     * @param  tipoTran {@code Tipo_Tran varchar(20)}.
     * @param  codEmp {@code Cod_Emp char(8)}.
     * @param  usuario {@code Usuario char(40)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static BuscaultimovoucherBcaResult execute(final Connection conn, String tipoTran, String codEmp, String usuario)
        throws SQLException
    {
        return new BuscaultimovoucherBcaCaller().executeProc(conn, tipoTran, codEmp, usuario);
    }
}
