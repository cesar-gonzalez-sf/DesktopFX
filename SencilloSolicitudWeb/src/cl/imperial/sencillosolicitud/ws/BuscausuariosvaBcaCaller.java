/*
 * Source: BuscausuariosvaBcaCaller.java - Generated by OBCOM SQL Wizard 1.158
 * Author: Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.sencillosolicitud.ws;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code SolicitudSencillo$BuscaUsuariosVA_bca}.
 *
 * @author Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 */
public class BuscausuariosvaBcaCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code BuscausuariosvaBcaCaller} instance.
     */
    public BuscausuariosvaBcaCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUsuariosVA_bca} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  valor {@code VALOR varchar(50)}.
     * @param  parametro {@code PARAMETRO char(20)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public BuscausuariosvaBcaResult executeProc(final DataSource dataSource, String valor, String parametro)
        throws SQLException
    {
        try (final Connection conn = dataSource.getConnection()) {
            return executeProc(conn, valor, parametro);
        }
    }

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUsuariosVA_bca} using a connection.
     *
     * @param  conn the database connection.
     * @param  valor {@code VALOR varchar(50)}.
     * @param  parametro {@code PARAMETRO char(20)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public BuscausuariosvaBcaResult executeProc(final Connection conn, String valor, String parametro)
        throws SQLException
    {
        final BuscausuariosvaBcaResult result = createProcResult();
        final String jdbcURL = getJdbcURL(conn);
        if (jdbcURL.startsWith("jdbc:oracle:")) {
            try (final CallableStatement call = prepareCall(conn, "{call SolicitudSencillo$BuscaUsuariosVA_bca(?,?,?,?)}")) {
                call.setString(1, valor);
                call.setString(2, parametro);
                call.registerOutParameter(3, Types.NVARCHAR);
                call.registerOutParameter(4, ORACLE_CURSOR);
                call.execute();
                result.setErrorMessage(call.getString(3));
                result.setSolicitudes(readSolicitudes((ResultSet) call.getObject(4)));
            }
        } else if (jdbcURL.startsWith("jdbc:postgresql:")) {
            try (final CallableStatement call = prepareCall(conn, "{call SolicitudSencillo$BuscaUsuariosVA_bca(?,?,?,?)}")) {
                call.setString(1, valor);
                call.setString(2, parametro);
                call.registerOutParameter(3, Types.NVARCHAR);
                call.registerOutParameter(4, Types.OTHER);
                call.execute();
                result.setErrorMessage(call.getString(3));
                result.setSolicitudes(readSolicitudes((ResultSet) call.getObject(4)));
            }
        } else {
            try (final CallableStatement call = prepareCall(conn, "{call SolicitudSencillo$BuscaUsuariosVA_bca(?,?,?)}")) {
                call.setString(1, valor);
                call.setString(2, parametro);
                call.registerOutParameter(3, Types.NVARCHAR);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1) {
                    if (!haveRset) {
                        updateCount = call.getUpdateCount();
                    } else if (result.getSolicitudes() == null) {
                        result.setSolicitudes(readSolicitudes(call.getResultSet()));
                    } else {
                        unexpectedResultSet(call.getResultSet());
                    }
                    haveRset = call.getMoreResults();
                }
                result.setErrorMessage(call.getString(3));
            }
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code BuscausuariosvaBcaResult}.
     * <p>
     * Can be overridden to return a subtype of {@code BuscausuariosvaBcaResult}.
     *
     * @return a new {@code BuscausuariosvaBcaResult} instance.
     */
    protected BuscausuariosvaBcaResult createProcResult()
    {
        return new BuscausuariosvaBcaResult();
    }

    //--------------------------------------------------------------------------
    //-- BuscausuariosvaBcaSolicitud ResultSet Methods -------------------------
    //--------------------------------------------------------------------------

    /**
     * Converts a result set to an array of {@code BuscausuariosvaBcaSolicitud}.
     *
     * @param  resultSet the result set to convert (can be null).
     * @return an array of {@code BuscausuariosvaBcaSolicitud} or null.
     * @throws SQLException if an SQL error occurs.
     */
    protected List<BuscausuariosvaBcaSolicitud> readSolicitudes(final ResultSet resultSet)
        throws SQLException
    {
        if (resultSet == null)
            return null;
        try {
            // Obtain ordinal (index) numbers of result columns
            final int cUsuCodigo = resultSet.findColumn("USU_CODIGO");
            final int cUsuario = resultSet.findColumn("USUARIO");
            final int cEmail = resultSet.findColumn("EMAIL");
            final int cRut = resultSet.findColumn("RUT");

            // Convert result rows to an array of "BuscausuariosvaBcaSolicitud"
            final List<BuscausuariosvaBcaSolicitud> list = new ArrayList<>();
            while (resultSet.next()) {
                final BuscausuariosvaBcaSolicitud item = createSolicitud();
                item.setUsuCodigo(resultSet.getString(cUsuCodigo));
                item.setUsuario(resultSet.getString(cUsuario));
                item.setEmail(resultSet.getString(cEmail));
                item.setRut(resultSet.getString(cRut));
                if (filterSolicitud(item)) list.add(item);
            }
            return list;
        } finally {
            resultSet.close();
        }
    }

    /**
     * Creates and returns a new instance of {@code BuscausuariosvaBcaSolicitud}.
     * <p>
     * Can be overridden to return a subtype of {@code BuscausuariosvaBcaSolicitud}.
     *
     * @return a new {@code BuscausuariosvaBcaSolicitud} instance.
     */
    protected BuscausuariosvaBcaSolicitud createSolicitud()
    {
        return new BuscausuariosvaBcaSolicitud();
    }

    /**
     * Returns {@code true} if supplied item should be added to result set.
     * <p>
     * Can be overridden to select which items are added to the result set.
     *
     * @param  item the {@code BuscausuariosvaBcaSolicitud} to be checked.
     * @return {@code true} if {@code item} should be added to result set.
     * @throws NullPointerException if {@code item} is {@code null}.
     */
    protected boolean filterSolicitud(final BuscausuariosvaBcaSolicitud item)
    {
        return true;
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUsuariosVA_bca} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  valor {@code VALOR varchar(50)}.
     * @param  parametro {@code PARAMETRO char(20)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static BuscausuariosvaBcaResult execute(final DataSource dataSource, String valor, String parametro)
        throws SQLException
    {
        return new BuscausuariosvaBcaCaller().executeProc(dataSource, valor, parametro);
    }

    /**
     * Executes procedure {@code SolicitudSencillo$BuscaUsuariosVA_bca} using a connection.
     *
     * @param  conn the database connection.
     * @param  valor {@code VALOR varchar(50)}.
     * @param  parametro {@code PARAMETRO char(20)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static BuscausuariosvaBcaResult execute(final Connection conn, String valor, String parametro)
        throws SQLException
    {
        return new BuscausuariosvaBcaCaller().executeProc(conn, valor, parametro);
    }
}
