/*
 * Source: IngresaestInsCaller.java - Generated by OBCOM SQL Wizard 1.158
 * Author: Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.estacionmantencion.ws;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code EstacionMantencion$IngresaEst_ins}.
 *
 * @author Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 */
public class IngresaestInsCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code IngresaestInsCaller} instance.
     */
    public IngresaestInsCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code EstacionMantencion$IngresaEst_ins} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  est {@code Est char(50)}.
     * @param  emp {@code Emp char(8)}.
     * @param  tipoest {@code TipoEst char(20)}.
     * @param  desc {@code Desc varchar(150)}.
     * @param  sucran {@code SucRan char(3)}.
     * @param  estran {@code EstRan char(2)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public IngresaestInsResult executeProc(final DataSource dataSource, String est, String emp, String tipoest, String desc, String sucran, String estran)
        throws SQLException
    {
        try (final Connection conn = dataSource.getConnection()) {
            return executeProc(conn, est, emp, tipoest, desc, sucran, estran);
        }
    }

    /**
     * Executes procedure {@code EstacionMantencion$IngresaEst_ins} using a connection.
     *
     * @param  conn the database connection.
     * @param  est {@code Est char(50)}.
     * @param  emp {@code Emp char(8)}.
     * @param  tipoest {@code TipoEst char(20)}.
     * @param  desc {@code Desc varchar(150)}.
     * @param  sucran {@code SucRan char(3)}.
     * @param  estran {@code EstRan char(2)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public IngresaestInsResult executeProc(final Connection conn, String est, String emp, String tipoest, String desc, String sucran, String estran)
        throws SQLException
    {
        final IngresaestInsResult result = createProcResult();
        final String jdbcURL = getJdbcURL(conn);
        if (jdbcURL.startsWith("jdbc:oracle:")) {
            try (final CallableStatement call = prepareCall(conn, "{call EstacionMantencion$IngresaEst_ins(?,?,?,?,?,?,?,?)}")) {
                call.setString(1, est);
                call.setString(2, emp);
                call.setString(3, tipoest);
                call.setString(4, desc);
                call.setString(5, sucran);
                call.setString(6, estran);
                call.registerOutParameter(7, Types.NVARCHAR);
                call.registerOutParameter(8, ORACLE_CURSOR);
                call.execute();
                result.setErrorMessage(call.getString(7));
                result.setRegistros(readRegistros((ResultSet) call.getObject(8)));
            }
        } else if (jdbcURL.startsWith("jdbc:postgresql:")) {
            try (final CallableStatement call = prepareCall(conn, "{call EstacionMantencion$IngresaEst_ins(?,?,?,?,?,?,?,?)}")) {
                call.setString(1, est);
                call.setString(2, emp);
                call.setString(3, tipoest);
                call.setString(4, desc);
                call.setString(5, sucran);
                call.setString(6, estran);
                call.registerOutParameter(7, Types.NVARCHAR);
                call.registerOutParameter(8, Types.OTHER);
                call.execute();
                result.setErrorMessage(call.getString(7));
                result.setRegistros(readRegistros((ResultSet) call.getObject(8)));
            }
        } else {
            try (final CallableStatement call = prepareCall(conn, "{call EstacionMantencion$IngresaEst_ins(?,?,?,?,?,?,?)}")) {
                call.setString(1, est);
                call.setString(2, emp);
                call.setString(3, tipoest);
                call.setString(4, desc);
                call.setString(5, sucran);
                call.setString(6, estran);
                call.registerOutParameter(7, Types.NVARCHAR);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1) {
                    if (!haveRset) {
                        updateCount = call.getUpdateCount();
                    } else if (result.getRegistros() == null) {
                        result.setRegistros(readRegistros(call.getResultSet()));
                    } else {
                        unexpectedResultSet(call.getResultSet());
                    }
                    haveRset = call.getMoreResults();
                }
                result.setErrorMessage(call.getString(7));
            }
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code IngresaestInsResult}.
     * <p>
     * Can be overridden to return a subtype of {@code IngresaestInsResult}.
     *
     * @return a new {@code IngresaestInsResult} instance.
     */
    protected IngresaestInsResult createProcResult()
    {
        return new IngresaestInsResult();
    }

    //--------------------------------------------------------------------------
    //-- IngresaestInsRegistro ResultSet Methods -------------------------------
    //--------------------------------------------------------------------------

    /**
     * Converts a result set to an array of {@code IngresaestInsRegistro}.
     *
     * @param  resultSet the result set to convert (can be null).
     * @return an array of {@code IngresaestInsRegistro} or null.
     * @throws SQLException if an SQL error occurs.
     */
    protected List<IngresaestInsRegistro> readRegistros(final ResultSet resultSet)
        throws SQLException
    {
        if (resultSet == null)
            return null;
        try {
            // Obtain ordinal (index) numbers of result columns
            final int cIns = resultSet.findColumn("INS");

            // Convert result rows to an array of "IngresaestInsRegistro"
            final List<IngresaestInsRegistro> list = new ArrayList<>();
            while (resultSet.next()) {
                final IngresaestInsRegistro item = createRegistro();
                item.setIns(resultSet.getString(cIns));
                if (filterRegistro(item)) list.add(item);
            }
            return list;
        } finally {
            resultSet.close();
        }
    }

    /**
     * Creates and returns a new instance of {@code IngresaestInsRegistro}.
     * <p>
     * Can be overridden to return a subtype of {@code IngresaestInsRegistro}.
     *
     * @return a new {@code IngresaestInsRegistro} instance.
     */
    protected IngresaestInsRegistro createRegistro()
    {
        return new IngresaestInsRegistro();
    }

    /**
     * Returns {@code true} if supplied item should be added to result set.
     * <p>
     * Can be overridden to select which items are added to the result set.
     *
     * @param  item the {@code IngresaestInsRegistro} to be checked.
     * @return {@code true} if {@code item} should be added to result set.
     * @throws NullPointerException if {@code item} is {@code null}.
     */
    protected boolean filterRegistro(final IngresaestInsRegistro item)
    {
        return true;
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code EstacionMantencion$IngresaEst_ins} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  est {@code Est char(50)}.
     * @param  emp {@code Emp char(8)}.
     * @param  tipoest {@code TipoEst char(20)}.
     * @param  desc {@code Desc varchar(150)}.
     * @param  sucran {@code SucRan char(3)}.
     * @param  estran {@code EstRan char(2)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static IngresaestInsResult execute(final DataSource dataSource, String est, String emp, String tipoest, String desc, String sucran, String estran)
        throws SQLException
    {
        return new IngresaestInsCaller().executeProc(dataSource, est, emp, tipoest, desc, sucran, estran);
    }

    /**
     * Executes procedure {@code EstacionMantencion$IngresaEst_ins} using a connection.
     *
     * @param  conn the database connection.
     * @param  est {@code Est char(50)}.
     * @param  emp {@code Emp char(8)}.
     * @param  tipoest {@code TipoEst char(20)}.
     * @param  desc {@code Desc varchar(150)}.
     * @param  sucran {@code SucRan char(3)}.
     * @param  estran {@code EstRan char(2)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static IngresaestInsResult execute(final Connection conn, String est, String emp, String tipoest, String desc, String sucran, String estran)
        throws SQLException
    {
        return new IngresaestInsCaller().executeProc(conn, est, emp, tipoest, desc, sucran, estran);
    }
}
