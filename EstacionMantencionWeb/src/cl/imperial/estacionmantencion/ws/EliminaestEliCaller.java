/*
 * Source: EliminaestEliCaller.java - Generated by OBCOM SQL Wizard 1.158
 * Author: Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.estacionmantencion.ws;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code EstacionMantencion$EliminaEst_eli}.
 *
 * @author Cesar Luis Gonzalez-Rubio Chacin (Imperial S.A.)
 */
public class EliminaestEliCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code EliminaestEliCaller} instance.
     */
    public EliminaestEliCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code EstacionMantencion$EliminaEst_eli} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  est {@code Est char(50)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public EliminaestEliResult executeProc(final DataSource dataSource, String est)
        throws SQLException
    {
        try (final Connection conn = dataSource.getConnection()) {
            return executeProc(conn, est);
        }
    }

    /**
     * Executes procedure {@code EstacionMantencion$EliminaEst_eli} using a connection.
     *
     * @param  conn the database connection.
     * @param  est {@code Est char(50)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public EliminaestEliResult executeProc(final Connection conn, String est)
        throws SQLException
    {
        final EliminaestEliResult result = createProcResult();
        try (final CallableStatement call = prepareCall(conn, "{call EstacionMantencion$EliminaEst_eli(?,?)}")) {
            call.setString(1, est);
            call.registerOutParameter(2, Types.NVARCHAR);
            call.execute();
            result.setErrorMessage(call.getString(2));
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code EliminaestEliResult}.
     * <p>
     * Can be overridden to return a subtype of {@code EliminaestEliResult}.
     *
     * @return a new {@code EliminaestEliResult} instance.
     */
    protected EliminaestEliResult createProcResult()
    {
        return new EliminaestEliResult();
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code EstacionMantencion$EliminaEst_eli} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  est {@code Est char(50)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static EliminaestEliResult execute(final DataSource dataSource, String est)
        throws SQLException
    {
        return new EliminaestEliCaller().executeProc(dataSource, est);
    }

    /**
     * Executes procedure {@code EstacionMantencion$EliminaEst_eli} using a connection.
     *
     * @param  conn the database connection.
     * @param  est {@code Est char(50)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static EliminaestEliResult execute(final Connection conn, String est)
        throws SQLException
    {
        return new EliminaestEliCaller().executeProc(conn, est);
    }
}
