/*
 * Source: RegistraPagoCaller.java - Generated by OBCOM SQL Wizard 1.158
 * Author: Nicolás Uribe Valenzuela (IMPERIAL S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.cajaunificada.ws;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code CajaUnificada$Registra_Pago}.
 *
 * @author Nicolás Uribe Valenzuela (IMPERIAL S.A.)
 */
public class RegistraPagoCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code RegistraPagoCaller} instance.
     */
    public RegistraPagoCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code CajaUnificada$Registra_Pago} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  wssUserCode {@code WSS_USER_CODE nvarchar(40)}.
     * @param  wssProfileCode {@code WSS_PROFILE_CODE int}.
     * @param  wssStationCode {@code WSS_STATION_CODE nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public RegistraPagoResult executeProc(final DataSource dataSource, String wssUserCode, int wssProfileCode, String wssStationCode, int nroInterno)
        throws SQLException
    {
        try (final Connection conn = dataSource.getConnection()) {
            return executeProc(conn, wssUserCode, wssProfileCode, wssStationCode, nroInterno);
        }
    }

    /**
     * Executes procedure {@code CajaUnificada$Registra_Pago} using a connection.
     *
     * @param  conn the database connection.
     * @param  wssUserCode {@code WSS_USER_CODE nvarchar(40)}.
     * @param  wssProfileCode {@code WSS_PROFILE_CODE int}.
     * @param  wssStationCode {@code WSS_STATION_CODE nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public RegistraPagoResult executeProc(final Connection conn, String wssUserCode, int wssProfileCode, String wssStationCode, int nroInterno)
        throws SQLException
    {
        final RegistraPagoResult result = createProcResult();
        final String jdbcURL = getJdbcURL(conn);
        if (jdbcURL.startsWith("jdbc:oracle:")) {
            try (final CallableStatement call = prepareCall(conn, "{call CajaUnificada$Registra_Pago(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}")) {
                call.setString(1, wssUserCode);
                call.setInt(2, wssProfileCode);
                call.setString(3, wssStationCode);
                call.setInt(4, nroInterno);
                call.registerOutParameter(5, Types.NVARCHAR);
                call.registerOutParameter(6, Types.TIMESTAMP);
                call.registerOutParameter(7, Types.NVARCHAR);
                call.registerOutParameter(8, Types.NVARCHAR);
                call.registerOutParameter(9, Types.NVARCHAR);
                call.registerOutParameter(10, Types.NVARCHAR);
                call.registerOutParameter(11, Types.NVARCHAR);
                call.registerOutParameter(12, Types.NVARCHAR);
                call.registerOutParameter(13, Types.NVARCHAR);
                call.registerOutParameter(14, Types.NVARCHAR);
                call.registerOutParameter(15, Types.NVARCHAR);
                call.registerOutParameter(16, Types.NVARCHAR);
                call.registerOutParameter(17, Types.NVARCHAR);
                call.registerOutParameter(18, Types.NVARCHAR);
                call.registerOutParameter(19, Types.NVARCHAR);
                call.registerOutParameter(20, Types.NVARCHAR);
                call.registerOutParameter(21, Types.NVARCHAR);
                call.registerOutParameter(22, Types.NVARCHAR);
                call.registerOutParameter(23, Types.NVARCHAR);
                call.registerOutParameter(24, Types.INTEGER);
                call.registerOutParameter(25, Types.INTEGER);
                call.registerOutParameter(26, Types.INTEGER);
                call.registerOutParameter(27, ORACLE_CURSOR);
                call.execute();
                result.setDteTipoDocumento(call.getString(5));
                result.setDteFechaHoraEmision(call.getTimestamp(6));
                result.setDteFolio(call.getString(7));
                result.setDteObservaciones(call.getString(8));
                result.setEmisorRut(call.getString(9));
                result.setEmisorDv(call.getString(10));
                result.setEmisorRazonSocial(call.getString(11));
                result.setEmisorGiro(call.getString(12));
                result.setEmisorDireccionMatriz(call.getString(13));
                result.setEmisorDireccionSucursal(call.getString(14));
                result.setEmisorVendedor(call.getString(15));
                result.setClienteRazonSocial(call.getString(16));
                result.setClienteRut(call.getString(17));
                result.setClienteDv(call.getString(18));
                result.setClienteDireccion(call.getString(19));
                result.setClienteComuna(call.getString(20));
                result.setClienteCiudad(call.getString(21));
                result.setClienteOrdenCompra(call.getString(22));
                result.setClienteCondiciones(call.getString(23));
                result.setTotalNeto(call.getInt(24));
                result.setIva(call.getInt(25));
                result.setTotal(call.getInt(26));
                result.setDetalles(readDetalles((ResultSet) call.getObject(27)));
            }
        } else if (jdbcURL.startsWith("jdbc:postgresql:")) {
            try (final CallableStatement call = prepareCall(conn, "{call CajaUnificada$Registra_Pago(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}")) {
                call.setString(1, wssUserCode);
                call.setInt(2, wssProfileCode);
                call.setString(3, wssStationCode);
                call.setInt(4, nroInterno);
                call.registerOutParameter(5, Types.NVARCHAR);
                call.registerOutParameter(6, Types.TIMESTAMP);
                call.registerOutParameter(7, Types.NVARCHAR);
                call.registerOutParameter(8, Types.NVARCHAR);
                call.registerOutParameter(9, Types.NVARCHAR);
                call.registerOutParameter(10, Types.NVARCHAR);
                call.registerOutParameter(11, Types.NVARCHAR);
                call.registerOutParameter(12, Types.NVARCHAR);
                call.registerOutParameter(13, Types.NVARCHAR);
                call.registerOutParameter(14, Types.NVARCHAR);
                call.registerOutParameter(15, Types.NVARCHAR);
                call.registerOutParameter(16, Types.NVARCHAR);
                call.registerOutParameter(17, Types.NVARCHAR);
                call.registerOutParameter(18, Types.NVARCHAR);
                call.registerOutParameter(19, Types.NVARCHAR);
                call.registerOutParameter(20, Types.NVARCHAR);
                call.registerOutParameter(21, Types.NVARCHAR);
                call.registerOutParameter(22, Types.NVARCHAR);
                call.registerOutParameter(23, Types.NVARCHAR);
                call.registerOutParameter(24, Types.INTEGER);
                call.registerOutParameter(25, Types.INTEGER);
                call.registerOutParameter(26, Types.INTEGER);
                call.registerOutParameter(27, Types.OTHER);
                call.execute();
                result.setDteTipoDocumento(call.getString(5));
                result.setDteFechaHoraEmision(call.getTimestamp(6));
                result.setDteFolio(call.getString(7));
                result.setDteObservaciones(call.getString(8));
                result.setEmisorRut(call.getString(9));
                result.setEmisorDv(call.getString(10));
                result.setEmisorRazonSocial(call.getString(11));
                result.setEmisorGiro(call.getString(12));
                result.setEmisorDireccionMatriz(call.getString(13));
                result.setEmisorDireccionSucursal(call.getString(14));
                result.setEmisorVendedor(call.getString(15));
                result.setClienteRazonSocial(call.getString(16));
                result.setClienteRut(call.getString(17));
                result.setClienteDv(call.getString(18));
                result.setClienteDireccion(call.getString(19));
                result.setClienteComuna(call.getString(20));
                result.setClienteCiudad(call.getString(21));
                result.setClienteOrdenCompra(call.getString(22));
                result.setClienteCondiciones(call.getString(23));
                result.setTotalNeto(call.getInt(24));
                result.setIva(call.getInt(25));
                result.setTotal(call.getInt(26));
                result.setDetalles(readDetalles((ResultSet) call.getObject(27)));
            }
        } else {
            try (final CallableStatement call = prepareCall(conn, "{call CajaUnificada$Registra_Pago(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}")) {
                call.setString(1, wssUserCode);
                call.setInt(2, wssProfileCode);
                call.setString(3, wssStationCode);
                call.setInt(4, nroInterno);
                call.registerOutParameter(5, Types.NVARCHAR);
                call.registerOutParameter(6, Types.TIMESTAMP);
                call.registerOutParameter(7, Types.NVARCHAR);
                call.registerOutParameter(8, Types.NVARCHAR);
                call.registerOutParameter(9, Types.NVARCHAR);
                call.registerOutParameter(10, Types.NVARCHAR);
                call.registerOutParameter(11, Types.NVARCHAR);
                call.registerOutParameter(12, Types.NVARCHAR);
                call.registerOutParameter(13, Types.NVARCHAR);
                call.registerOutParameter(14, Types.NVARCHAR);
                call.registerOutParameter(15, Types.NVARCHAR);
                call.registerOutParameter(16, Types.NVARCHAR);
                call.registerOutParameter(17, Types.NVARCHAR);
                call.registerOutParameter(18, Types.NVARCHAR);
                call.registerOutParameter(19, Types.NVARCHAR);
                call.registerOutParameter(20, Types.NVARCHAR);
                call.registerOutParameter(21, Types.NVARCHAR);
                call.registerOutParameter(22, Types.NVARCHAR);
                call.registerOutParameter(23, Types.NVARCHAR);
                call.registerOutParameter(24, Types.INTEGER);
                call.registerOutParameter(25, Types.INTEGER);
                call.registerOutParameter(26, Types.INTEGER);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1) {
                    if (!haveRset) {
                        updateCount = call.getUpdateCount();
                    } else if (result.getDetalles() == null) {
                        result.setDetalles(readDetalles(call.getResultSet()));
                    } else {
                        unexpectedResultSet(call.getResultSet());
                    }
                    haveRset = call.getMoreResults();
                }
                result.setDteTipoDocumento(call.getString(5));
                result.setDteFechaHoraEmision(call.getTimestamp(6));
                result.setDteFolio(call.getString(7));
                result.setDteObservaciones(call.getString(8));
                result.setEmisorRut(call.getString(9));
                result.setEmisorDv(call.getString(10));
                result.setEmisorRazonSocial(call.getString(11));
                result.setEmisorGiro(call.getString(12));
                result.setEmisorDireccionMatriz(call.getString(13));
                result.setEmisorDireccionSucursal(call.getString(14));
                result.setEmisorVendedor(call.getString(15));
                result.setClienteRazonSocial(call.getString(16));
                result.setClienteRut(call.getString(17));
                result.setClienteDv(call.getString(18));
                result.setClienteDireccion(call.getString(19));
                result.setClienteComuna(call.getString(20));
                result.setClienteCiudad(call.getString(21));
                result.setClienteOrdenCompra(call.getString(22));
                result.setClienteCondiciones(call.getString(23));
                result.setTotalNeto(call.getInt(24));
                result.setIva(call.getInt(25));
                result.setTotal(call.getInt(26));
            }
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code RegistraPagoResult}.
     * <p>
     * Can be overridden to return a subtype of {@code RegistraPagoResult}.
     *
     * @return a new {@code RegistraPagoResult} instance.
     */
    protected RegistraPagoResult createProcResult()
    {
        return new RegistraPagoResult();
    }

    //--------------------------------------------------------------------------
    //-- RegistraPagoDetalle ResultSet Methods ---------------------------------
    //--------------------------------------------------------------------------

    /**
     * Converts a result set to an array of {@code RegistraPagoDetalle}.
     *
     * @param  resultSet the result set to convert (can be null).
     * @return an array of {@code RegistraPagoDetalle} or null.
     * @throws SQLException if an SQL error occurs.
     */
    protected List<RegistraPagoDetalle> readDetalles(final ResultSet resultSet)
        throws SQLException
    {
        if (resultSet == null)
            return null;
        try {
            // Obtain ordinal (index) numbers of result columns
            final int cCodRapido = resultSet.findColumn("COD_RAPIDO");
            final int cDescripcion = resultSet.findColumn("DESCRIPCION");
            final int cCantidad = resultSet.findColumn("CANTIDAD");
            final int cUnidadMedida = resultSet.findColumn("UNIDAD_MEDIDA");
            final int cPrecioUnitario = resultSet.findColumn("PRECIO_UNITARIO");
            final int cTotal = resultSet.findColumn("TOTAL");

            // Convert result rows to an array of "RegistraPagoDetalle"
            final List<RegistraPagoDetalle> list = new ArrayList<>();
            while (resultSet.next()) {
                final RegistraPagoDetalle item = createDetalle();
                item.setCodRapido(resultSet.getInt(cCodRapido));
                item.setDescripcion(resultSet.getString(cDescripcion));
                item.setCantidad(resultSet.getBigDecimal(cCantidad));
                item.setUnidadMedida(resultSet.getString(cUnidadMedida));
                item.setPrecioUnitario(resultSet.getInt(cPrecioUnitario));
                item.setTotal(resultSet.getBigDecimal(cTotal));
                if (filterDetalle(item)) list.add(item);
            }
            return list;
        } finally {
            resultSet.close();
        }
    }

    /**
     * Creates and returns a new instance of {@code RegistraPagoDetalle}.
     * <p>
     * Can be overridden to return a subtype of {@code RegistraPagoDetalle}.
     *
     * @return a new {@code RegistraPagoDetalle} instance.
     */
    protected RegistraPagoDetalle createDetalle()
    {
        return new RegistraPagoDetalle();
    }

    /**
     * Returns {@code true} if supplied item should be added to result set.
     * <p>
     * Can be overridden to select which items are added to the result set.
     *
     * @param  item the {@code RegistraPagoDetalle} to be checked.
     * @return {@code true} if {@code item} should be added to result set.
     * @throws NullPointerException if {@code item} is {@code null}.
     */
    protected boolean filterDetalle(final RegistraPagoDetalle item)
    {
        return true;
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code CajaUnificada$Registra_Pago} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  wssUserCode {@code WSS_USER_CODE nvarchar(40)}.
     * @param  wssProfileCode {@code WSS_PROFILE_CODE int}.
     * @param  wssStationCode {@code WSS_STATION_CODE nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static RegistraPagoResult execute(final DataSource dataSource, String wssUserCode, int wssProfileCode, String wssStationCode, int nroInterno)
        throws SQLException
    {
        return new RegistraPagoCaller().executeProc(dataSource, wssUserCode, wssProfileCode, wssStationCode, nroInterno);
    }

    /**
     * Executes procedure {@code CajaUnificada$Registra_Pago} using a connection.
     *
     * @param  conn the database connection.
     * @param  wssUserCode {@code WSS_USER_CODE nvarchar(40)}.
     * @param  wssProfileCode {@code WSS_PROFILE_CODE int}.
     * @param  wssStationCode {@code WSS_STATION_CODE nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static RegistraPagoResult execute(final Connection conn, String wssUserCode, int wssProfileCode, String wssStationCode, int nroInterno)
        throws SQLException
    {
        return new RegistraPagoCaller().executeProc(conn, wssUserCode, wssProfileCode, wssStationCode, nroInterno);
    }
}
