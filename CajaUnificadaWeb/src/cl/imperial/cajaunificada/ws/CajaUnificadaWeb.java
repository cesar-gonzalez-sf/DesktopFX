/*
 * Source: CajaUnificadaWeb.java - Generated by OBCOM SQL Wizard 1.158
 * Author: Nicolás Uribe Valenzuela (IMPERIAL S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.cajaunificada.ws;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Resource;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletRequest;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

/**
 * The {@code CajaUnificada} Web Service.
 *
 * @author Nicolás Uribe Valenzuela (IMPERIAL S.A.)
 */
@WebService(targetNamespace = CajaUnificadaWeb.TNS)
public class CajaUnificadaWeb
{
    /** The Target Namespace of the Web Service. */
    public static final String TNS = "http://ws.cajaunificada.imperial.cl/cajaunificada";

    /** The Logger of the Web Service. */
    private static final Logger logger =
        Logger.getLogger(CajaUnificadaWeb.class.getName());

    /** The Context of the Web Service. */
    @Resource(name = "webServiceContext")
    private WebServiceContext webServiceContext;

    /** The User Transaction of the Web Service. */
    @Resource(name = "userTransaction")
    private UserTransaction userTransaction;

    /** The Data Source of the Web Service. */
    @Resource(name = "CajaUnificadaDataSource")
    private DataSource dataSource;

    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code CajaUnificadaWeb} instance.
     */
    public CajaUnificadaWeb()
    {
    }

    //--------------------------------------------------------------------------
    //-- WebService Methods ----------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code CajaUnificada$Registra_Pago}.
     *
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @return the output parameters and result sets of the procedure.
     * @throws CajaUnificadaWebException if an error occurs.
     */
    @WebMethod(operationName = "registraPago")
    @WebResult(name = "registraPagoResult", targetNamespace = TNS)
    public RegistraPagoResult registraPago(
        @WebParam(name = "nroInterno", targetNamespace = TNS) final int nroInterno)
        throws CajaUnificadaWebException
    {
        final RegistraPagoResult result;
        try {
            getUserTransaction().begin();
            try {
                result = RegistraPagoCaller.execute(getDataSource(), getWssUserCode(), getWssProfileCode(), getWssStationCode(), nroInterno);
            } catch (final Throwable callerThrowable) {
                getUserTransaction().rollback();
                throw callerThrowable;
            }
            getUserTransaction().commit();
        } catch (final Throwable thrown) {
            logError(thrown, "registraPago");
            throw new CajaUnificadaWebException(thrown, "registraPago");
        }
        return result;
    }

    /**
     * Executes procedure {@code CajaUnificada$Startup}.
     *
     * @param  userCode {@code USER_CODE nvarchar(40)}.
     * @param  profileCode {@code PROFILE_CODE decimal(7)}.
     * @param  stationName {@code STATION_NAME nvarchar(16)}.
     * @return the output parameters and result sets of the procedure.
     * @throws CajaUnificadaWebException if an error occurs.
     */
    @WebMethod(operationName = "startup")
    @WebResult(name = "startupResult", targetNamespace = TNS)
    public StartupResult startup(
        @WebParam(name = "userCode", targetNamespace = TNS) final String userCode,
        @WebParam(name = "profileCode", targetNamespace = TNS) final BigDecimal profileCode,
        @WebParam(name = "stationName", targetNamespace = TNS) final String stationName)
        throws CajaUnificadaWebException
    {
        final StartupResult result;
        try {
            getUserTransaction().begin();
            try {
                result = StartupCaller.execute(getDataSource(), userCode, profileCode, stationName);
            } catch (final Throwable callerThrowable) {
                getUserTransaction().rollback();
                throw callerThrowable;
            }
            getUserTransaction().commit();
        } catch (final Throwable thrown) {
            logError(thrown, "startup");
            throw new CajaUnificadaWebException(thrown, "startup");
        }
        return result;
    }

    /**
     * Executes procedure {@code CajaUnificada$Vale_Get}.
     *
     * @param  userCode {@code USER_CODE nvarchar(40)}.
     * @param  profileCode {@code PROFILE_CODE decimal(7)}.
     * @param  stationName {@code STATION_NAME nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @param  codEmp {@code COD_EMP nvarchar(10)}.
     * @return the output parameters and result sets of the procedure.
     * @throws CajaUnificadaWebException if an error occurs.
     */
    @WebMethod(operationName = "valeGet")
    @WebResult(name = "valeGetResult", targetNamespace = TNS)
    public ValeGetResult valeGet(
        @WebParam(name = "userCode", targetNamespace = TNS) final String userCode,
        @WebParam(name = "profileCode", targetNamespace = TNS) final BigDecimal profileCode,
        @WebParam(name = "stationName", targetNamespace = TNS) final String stationName,
        @WebParam(name = "nroInterno", targetNamespace = TNS) final int nroInterno,
        @WebParam(name = "codEmp", targetNamespace = TNS) final String codEmp)
        throws CajaUnificadaWebException
    {
        final ValeGetResult result;
        try {
            getUserTransaction().begin();
            try {
                result = ValeGetCaller.execute(getDataSource(), userCode, profileCode, stationName, nroInterno, codEmp);
            } catch (final Throwable callerThrowable) {
                getUserTransaction().rollback();
                throw callerThrowable;
            }
            getUserTransaction().commit();
        } catch (final Throwable thrown) {
            logError(thrown, "valeGet");
            throw new CajaUnificadaWebException(thrown, "valeGet");
        }
        return result;
    }

    //--------------------------------------------------------------------------
    //-- Security Methods ------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Returns the user code of the context of the WebService.
     *
     * @return the user code of the context of the WebService.
     * @throws IllegalStateException if the user code is not defined.
     * @throws NamingException if a JNDI error occurs.
     */
    private String getWssUserCode()
        throws NamingException
    {
        final String key = "cl.obcom.web.security.user.code";
        final Object value = getServletRequest().getAttribute(key);
        if (!(value instanceof String))
            throw new IllegalStateException("WebService user code is not defined");
        return (String) value;
    }

    /**
     * Returns the profile code of the context of the WebService.
     *
     * @return the profile code of the context of the WebService.
     * @throws IllegalStateException if the profile code is not defined.
     * @throws NamingException if a JNDI error occurs.
     */
    private Integer getWssProfileCode()
        throws NamingException
    {
        final String key = "cl.obcom.web.security.profile.code";
        final Object value = getServletRequest().getAttribute(key);
        if (!(value instanceof Integer))
            throw new IllegalStateException("WebService profile code not defined");
        return (Integer) value;
    }

    /**
     * Returns the station code of the context of the WebService.
     *
     * @return the station code of the context of the WebService.
     * @throws IllegalStateException if the station code is not defined.
     * @throws NamingException if a JNDI error occurs.
     */
    private String getWssStationCode()
        throws NamingException
    {
        final String key = "cl.obcom.web.security.station.code";
        final Object value = getServletRequest().getAttribute(key);
        if (!(value instanceof String))
            throw new IllegalStateException("WebService station code is not defined");
        return (String) value;
    }

    //--------------------------------------------------------------------------
    //-- JNDI Methods ----------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Returns the servlet request instance of the WebService.
     *
     * @return the servlet request instance of the WebService.
     * @throws NullPointerException if a required value is {@code null}.
     * @throws NamingException if a JNDI error occurs.
     */
    private ServletRequest getServletRequest()
        throws NamingException
    {
        final MessageContext context = getWebServiceContext().getMessageContext();
        if (context == null)
            throw new NullPointerException("WebService message context is null");
        final Object value = context.get(MessageContext.SERVLET_REQUEST);
        if (!(value instanceof ServletRequest))
            throw new NullPointerException("WebService servlet request is null");
        return (ServletRequest) value;
    }

    /**
     * Returns the context of the WebService.
     *
     * @return the context of the WebService.
     * @throws NamingException if a JNDI error occurs.
     */
    private WebServiceContext getWebServiceContext()
        throws NamingException
    {
        if (webServiceContext == null) {
            final InitialContext context = new InitialContext();
            try {
                webServiceContext = (WebServiceContext) context.lookup("java:comp/env/webServiceContext");
            } finally {
                context.close();
            }
        }
        return webServiceContext;
    }

    /**
     * Returns the user transaction of the WebService.
     *
     * @return the user transaction of the WebService.
     * @throws NamingException if a JNDI error occurs.
     */
    private UserTransaction getUserTransaction()
        throws NamingException
    {
        if (userTransaction == null) {
            final InitialContext context = new InitialContext();
            try {
                userTransaction = (UserTransaction) context.lookup("java:comp/UserTransaction");
            } finally {
                context.close();
            }
        }
        return userTransaction;
    }

    /**
     * Returns the data source of the WebService.
     *
     * @return the data source of the WebService.
     * @throws NamingException if a JNDI error occurs.
     */
    private DataSource getDataSource()
        throws NamingException
    {
        if (dataSource == null) {
            final InitialContext context = new InitialContext();
            try {
                dataSource = (DataSource) context.lookup("java:comp/env/CajaUnificadaDataSource");
            } finally {
                context.close();
            }
        }
        return dataSource;
    }

    //--------------------------------------------------------------------------
    //-- Error Methods ---------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Logs a method error with associated throwable information.
     *
     * @param thrown the throwable associated with the error.
     * @param methodName the name of method that threw the error.
     */
    private void logError(final Throwable thrown, final String methodName)
    {
        if (thrown instanceof SQLException) {
            logSqlError((SQLException) thrown, methodName);
        } else {
            final String fullName = getClass().getName() + '#' + methodName;
            logger.log(Level.SEVERE, "Error executing " + fullName, thrown);
        }
    }

    /**
     * Logs a method error with associated SQLException information.
     *
     * @param  sqlex the SQLException associated with the error.
     * @param  methodName the name of method that threw the error.
     * @throws NullPointerException if {@code sqlex} is {@code null}.
     */
    private void logSqlError(final SQLException sqlex, final String methodName)
    {
        // Compute full method name and obtain SQL properties
        final String fullName = getClass().getName() + '#' + methodName;
        final String sqlState = sqlex.getSQLState();
        final int sqlErrorCode = sqlex.getErrorCode();

        // Obtain all error messages of SQLException
        final StringBuilder sb = new StringBuilder(200);
        final Iterator<Throwable> iter = sqlex.iterator();
        while (iter.hasNext()) {
            final Throwable cause = iter.next();
            if (sb.length() > 0) sb.append(": ");
            final String msg = cause.getMessage();
            sb.append(msg != null ? msg : cause.toString());
        }
        final String sqlMessages = sb.toString();

        // Log error including full method name and SQL properties
        final String sqlProps = ": (" + sqlState + ',' + sqlErrorCode + ") ";
        logger.severe("Error executing " + fullName + sqlProps + sqlMessages);
    }
}
