/*
 * Source: ValeGetCaller.java - Generated by OBCOM SQL Wizard 1.158
 * Author: Nicolás Uribe Valenzuela (IMPERIAL S.A.)
 *
 * Copyright (c) IMPERIAL S.A. All rights reserved.
 * 
 * All  rights  to  this product are owned by IMPERIAL S.A. and may only be used
 * under the terms of its associated license document. You may NOT copy, modify,
 * sublicense,  or  distribute  this  source  file  or  portions  of  it  unless
 * previously authorized in writing by IMPERIAL S.A. In any event,  this  notice
 * and above copyright must always be included verbatim with this file.
 */

package cl.imperial.cajaunificada.ws;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import javax.sql.DataSource;

/**
 * Caller of procedure {@code CajaUnificada$Vale_Get}.
 *
 * @author Nicolás Uribe Valenzuela (IMPERIAL S.A.)
 */
public class ValeGetCaller extends ProcedureCaller
{
    //--------------------------------------------------------------------------
    //-- Constructor Methods ---------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Constructs a new {@code ValeGetCaller} instance.
     */
    public ValeGetCaller()
    {
    }

    //--------------------------------------------------------------------------
    //-- Execute Methods -------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code CajaUnificada$Vale_Get} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  userCode {@code USER_CODE nvarchar(40)}.
     * @param  profileCode {@code PROFILE_CODE decimal(7)}.
     * @param  stationName {@code STATION_NAME nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @param  codEmp {@code COD_EMP nvarchar(10)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public ValeGetResult executeProc(final DataSource dataSource, String userCode, BigDecimal profileCode, String stationName, int nroInterno, String codEmp)
        throws SQLException
    {
        try (final Connection conn = dataSource.getConnection()) {
            return executeProc(conn, userCode, profileCode, stationName, nroInterno, codEmp);
        }
    }

    /**
     * Executes procedure {@code CajaUnificada$Vale_Get} using a connection.
     *
     * @param  conn the database connection.
     * @param  userCode {@code USER_CODE nvarchar(40)}.
     * @param  profileCode {@code PROFILE_CODE decimal(7)}.
     * @param  stationName {@code STATION_NAME nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @param  codEmp {@code COD_EMP nvarchar(10)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public ValeGetResult executeProc(final Connection conn, String userCode, BigDecimal profileCode, String stationName, int nroInterno, String codEmp)
        throws SQLException
    {
        final ValeGetResult result = createProcResult();
        try (final CallableStatement call = prepareCall(conn, "{call CajaUnificada$Vale_Get(?,?,?,?,?,?,?,?,?,?)}")) {
            call.setString(1, userCode);
            call.setBigDecimal(2, profileCode);
            call.setString(3, stationName);
            call.setInt(4, nroInterno);
            call.setString(5, codEmp);
            call.registerOutParameter(6, Types.NVARCHAR);
            call.registerOutParameter(7, Types.TIMESTAMP);
            call.registerOutParameter(8, Types.INTEGER);
            call.registerOutParameter(9, Types.INTEGER);
            call.registerOutParameter(10, Types.NVARCHAR);
            call.execute();
            result.setNombreCliente(call.getString(6));
            result.setFechaEmision(call.getTimestamp(7));
            result.setDescuento(call.getInt(8));
            result.setMonto(call.getInt(9));
            result.setTipoDocumento(call.getString(10));
        }
        return result;
    }

    /**
     * Creates and returns a new instance of {@code ValeGetResult}.
     * <p>
     * Can be overridden to return a subtype of {@code ValeGetResult}.
     *
     * @return a new {@code ValeGetResult} instance.
     */
    protected ValeGetResult createProcResult()
    {
        return new ValeGetResult();
    }

    //--------------------------------------------------------------------------
    //-- Static Methods --------------------------------------------------------
    //--------------------------------------------------------------------------

    /**
     * Executes procedure {@code CajaUnificada$Vale_Get} using a data source.
     *
     * @param  dataSource the connection data source.
     * @param  userCode {@code USER_CODE nvarchar(40)}.
     * @param  profileCode {@code PROFILE_CODE decimal(7)}.
     * @param  stationName {@code STATION_NAME nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @param  codEmp {@code COD_EMP nvarchar(10)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static ValeGetResult execute(final DataSource dataSource, String userCode, BigDecimal profileCode, String stationName, int nroInterno, String codEmp)
        throws SQLException
    {
        return new ValeGetCaller().executeProc(dataSource, userCode, profileCode, stationName, nroInterno, codEmp);
    }

    /**
     * Executes procedure {@code CajaUnificada$Vale_Get} using a connection.
     *
     * @param  conn the database connection.
     * @param  userCode {@code USER_CODE nvarchar(40)}.
     * @param  profileCode {@code PROFILE_CODE decimal(7)}.
     * @param  stationName {@code STATION_NAME nvarchar(16)}.
     * @param  nroInterno {@code NRO_INTERNO int}.
     * @param  codEmp {@code COD_EMP nvarchar(10)}.
     * @return the output parameters and result sets of the procedure.
     * @throws SQLException if an SQL error occurs.
     */
    public static ValeGetResult execute(final Connection conn, String userCode, BigDecimal profileCode, String stationName, int nroInterno, String codEmp)
        throws SQLException
    {
        return new ValeGetCaller().executeProc(conn, userCode, profileCode, stationName, nroInterno, codEmp);
    }
}
